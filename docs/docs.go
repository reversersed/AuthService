// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "consumes": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/token": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "token"
                ],
                "summary": "Get access token with provided GUID",
                "parameters": [
                    {
                        "description": "Request with user's guid",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.GetTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/endpoint.GetTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Received bad request",
                        "schema": {
                            "$ref": "#/definitions/middleware.customError"
                        }
                    },
                    "500": {
                        "description": "Internal error occured",
                        "schema": {
                            "$ref": "#/definitions/middleware.customError"
                        }
                    }
                }
            }
        },
        "/v1/token/refresh": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "token"
                ],
                "summary": "Updates token with provided refresh token",
                "parameters": [
                    {
                        "description": "Refreshed pair token-refresh",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/endpoint.RefreshTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Received bad request",
                        "schema": {
                            "$ref": "#/definitions/middleware.customError"
                        }
                    },
                    "409": {
                        "description": "Client trying to authorize with different IP address",
                        "schema": {
                            "$ref": "#/definitions/middleware.customError"
                        }
                    },
                    "500": {
                        "description": "Internal error occured",
                        "schema": {
                            "$ref": "#/definitions/middleware.customError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "endpoint.GetTokenRequest": {
            "type": "object",
            "required": [
                "guid"
            ],
            "properties": {
                "guid": {
                    "type": "string",
                    "example": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
                }
            }
        },
        "endpoint.GetTokenResponse": {
            "type": "object",
            "properties": {
                "refresh": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "endpoint.RefreshTokenRequest": {
            "type": "object",
            "required": [
                "refresh",
                "token"
            ],
            "properties": {
                "refresh": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "endpoint.RefreshTokenResponse": {
            "type": "object",
            "properties": {
                "refresh": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "middleware.customError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "Headers"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:9000",
	BasePath:         "/api/",
	Schemes:          []string{},
	Title:            "API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
