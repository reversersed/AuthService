// Code generated by MockGen. DO NOT EDIT.
// Source: init.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// Mocklogger is a mock of logger interface.
type Mocklogger struct {
	ctrl     *gomock.Controller
	recorder *MockloggerMockRecorder
}

// MockloggerMockRecorder is the mock recorder for Mocklogger.
type MockloggerMockRecorder struct {
	mock *Mocklogger
}

// NewMocklogger creates a new mock instance.
func NewMocklogger(ctrl *gomock.Controller) *Mocklogger {
	mock := &Mocklogger{ctrl: ctrl}
	mock.recorder = &MockloggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklogger) EXPECT() *MockloggerMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *Mocklogger) Info(arg0 ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockloggerMockRecorder) Info(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*Mocklogger)(nil).Info), arg0...)
}

// Infof mocks base method.
func (m *Mocklogger) Infof(arg0 string, arg1 ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockloggerMockRecorder) Infof(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*Mocklogger)(nil).Infof), varargs...)
}

// Warnf mocks base method.
func (m *Mocklogger) Warnf(arg0 string, arg1 ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockloggerMockRecorder) Warnf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*Mocklogger)(nil).Warnf), varargs...)
}

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// CreateNewRefreshPassword mocks base method.
func (m *Mockstorage) CreateNewRefreshPassword(arg0 string, arg1 []byte, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewRefreshPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewRefreshPassword indicates an expected call of CreateNewRefreshPassword.
func (mr *MockstorageMockRecorder) CreateNewRefreshPassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewRefreshPassword", reflect.TypeOf((*Mockstorage)(nil).CreateNewRefreshPassword), arg0, arg1, arg2)
}

// GetFreeRefreshToken mocks base method.
func (m *Mockstorage) GetFreeRefreshToken(arg0 string, arg1 time.Time) (string, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFreeRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFreeRefreshToken indicates an expected call of GetFreeRefreshToken.
func (mr *MockstorageMockRecorder) GetFreeRefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreeRefreshToken", reflect.TypeOf((*Mockstorage)(nil).GetFreeRefreshToken), arg0, arg1)
}

// RevokeRefreshToken mocks base method.
func (m *Mockstorage) RevokeRefreshToken(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeRefreshToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeRefreshToken indicates an expected call of RevokeRefreshToken.
func (mr *MockstorageMockRecorder) RevokeRefreshToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRefreshToken", reflect.TypeOf((*Mockstorage)(nil).RevokeRefreshToken), arg0)
}

// MockemailService is a mock of emailService interface.
type MockemailService struct {
	ctrl     *gomock.Controller
	recorder *MockemailServiceMockRecorder
}

// MockemailServiceMockRecorder is the mock recorder for MockemailService.
type MockemailServiceMockRecorder struct {
	mock *MockemailService
}

// NewMockemailService creates a new mock instance.
func NewMockemailService(ctrl *gomock.Controller) *MockemailService {
	mock := &MockemailService{ctrl: ctrl}
	mock.recorder = &MockemailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockemailService) EXPECT() *MockemailServiceMockRecorder {
	return m.recorder
}

// SendEmailWarning mocks base method.
func (m *MockemailService) SendEmailWarning(ip string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendEmailWarning", ip)
}

// SendEmailWarning indicates an expected call of SendEmailWarning.
func (mr *MockemailServiceMockRecorder) SendEmailWarning(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailWarning", reflect.TypeOf((*MockemailService)(nil).SendEmailWarning), ip)
}
